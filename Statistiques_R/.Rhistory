plot_bgcolor = 'rgba(240, 240, 240, 0.8)',  # Fond gris plus clair
paper_bgcolor = 'rgba(250, 250, 250, 1)',  # Fond blanc pour l'ensemble du graphique
margin = list(l = 100, r = 100, b = 200, t = 100),
bargap = 0.1)  # Réduire l'espace entre les barres
# Afficher le graphique
plot
df <- read.csv("/Users/pauline/Documents/DocumentsSandoz/Sandoz/pliegos-ner/stat_R/NER_List_All_18.csv", stringsAsFactors = FALSE)
# Supprimer les lignes où normalized_name est vide ou contient uniquement des espaces
df <- df %>%
filter(trimws(normalized_name) != "")
# Compter les occurrences de chaque nom
occurrences_df <- df %>%
group_by(normalized_name) %>%
summarise(Occurrences = n()) %>%
ungroup()
# Trier par nombre d'occurrences décroissant
occurrences_df <- occurrences_df %>%
arrange(desc(Occurrences))
# Créer une palette de couleurs progressive (du plus foncé au plus clair)
color_palette <- colorRampPalette(c("#18534F", "#226D68", "#ECF8F6", "#FEEAA1", "#D6955B"))(nrow(occurrences_df))
# Créer un graphique interactif avec plotly
plot <- plot_ly(occurrences_df,
x = ~reorder(normalized_name, -Occurrences),  # Trier par occurrences totales
y = ~Occurrences,
type = 'bar',  # Utiliser des barres au lieu de points
marker = list(color = color_palette, opacity = 0.9),
text = ~ifelse(Occurrences == max(Occurrences), Occurrences, ""),  # Ajouter le texte seulement pour l'occurrence maximale
textposition = 'outside',  # Positionner le texte à l'extérieur des barres
hoverinfo = 'y+x+text') %>%
layout(title = list(text = "Análisis general del corpus",
font = list(family = "Cinzel Decorative", size = 24)),
xaxis = list(title = "Lieux",
titlefont = list(family = "Oswald", size = 18),
tickfont = list(family = "Helvetica", size = 14),
tickangle = 45),  # Tourner les étiquettes de l'axe X
yaxis = list(title = "Occurrences",
titlefont = list(family = "Oswald", size = 18),
tickfont = list(family = "Helvetica", size = 14),
type = "log",  # Utiliser une échelle logarithmique
gridcolor = 'rgba(200, 200, 200, 0.3)'),  # Lignes de grille gris clair
font = list(family = "Helvetica"),
plot_bgcolor = 'rgba(240, 240, 240, 0.8)',  # Fond gris plus clair
paper_bgcolor = 'rgba(250, 250, 250, 1)',  # Fond blanc pour l'ensemble du graphique
margin = list(l = 100, r = 100, b = 200, t = 100),
bargap = 0.1)  # Réduire l'espace entre les barres
# Afficher le graphique
plot
df <- read.csv("/Users/pauline/Documents/DocumentsSandoz/Sandoz/pliegos-ner/stat_R/NER_List_All_18.csv", stringsAsFactors = FALSE)
# Supprimer les lignes où normalized_name est vide ou contient uniquement des espaces
df <- df %>%
filter(trimws(normalized_name) != "")
# Compter les occurrences de chaque nom
occurrences_df <- df %>%
group_by(normalized_name) %>%
summarise(Occurrences = n()) %>%
ungroup()
# Trier par nombre d'occurrences décroissant
occurrences_df <- occurrences_df %>%
arrange(desc(Occurrences))
# Créer une palette de couleurs progressive (du plus foncé au plus clair)
color_palette <- colorRampPalette(c("#18534F", "#226D68", "#ECF8F6", "#FEEAA1", "#D6955B"))(nrow(occurrences_df))
# Créer un graphique interactif avec plotly
plot <- plot_ly(occurrences_df,
x = ~reorder(normalized_name, -Occurrences),  # Trier par occurrences totales
y = ~Occurrences,
type = 'bar',  # Utiliser des barres au lieu de points
marker = list(color = color_palette, opacity = 0.9),
hoverinfo = 'y+x+text') %>%
layout(title = list(text = "Análisis general del corpus",
font = list(family = "Cinzel Decorative", size = 24)),
xaxis = list(title = "Lieux",
titlefont = list(family = "Oswald", size = 18),
tickfont = list(family = "Helvetica", size = 14),
tickangle = 45),  # Tourner les étiquettes de l'axe X
yaxis = list(title = "Occurrences",
titlefont = list(family = "Oswald", size = 18),
tickfont = list(family = "Helvetica", size = 14),
type = "log",  # Utiliser une échelle logarithmique
gridcolor = 'rgba(200, 200, 200, 0.3)'),  # Lignes de grille gris clair
font = list(family = "Helvetica"),
plot_bgcolor = 'rgba(240, 240, 240, 0.8)',  # Fond gris plus clair
paper_bgcolor = 'rgba(250, 250, 250, 1)',  # Fond blanc pour l'ensemble du graphique
margin = list(l = 100, r = 100, b = 200, t = 100),
bargap = 0.1,  # Réduire l'espace entre les barres
annotations = list(
x = 0.01,  # Position sur l'axe X (proche de l'origine)
y = 0.99,  # Position sur l'axe Y (tout en haut)
text = paste("Max Occurrence:", max(occurrences_df$Occurrences)),
showarrow = FALSE,
xref = "paper",  # Positionner par rapport au papier, pas aux données
yref = "paper",
font = list(family = "Oswald", size = 14, color = "#000000"),
align = "left"
))
# Afficher le graphique
plot
df <- read.csv("/Users/pauline/Documents/DocumentsSandoz/Sandoz/pliegos-ner/stat_R/NER_List_All_18.csv", stringsAsFactors = FALSE)
# Supprimer les lignes où normalized_name est vide ou contient uniquement des espaces
df <- df %>%
filter(trimws(normalized_name) != "")
# Compter les occurrences de chaque nom
occurrences_df <- df %>%
group_by(normalized_name) %>%
summarise(Occurrences = n()) %>%
ungroup()
# Trier par nombre d'occurrences décroissant
occurrences_df <- occurrences_df %>%
arrange(desc(Occurrences))
# Créer une palette de couleurs progressive (du plus foncé au plus clair)
color_palette <- colorRampPalette(c("#18534F", "#226D68", "#ECF8F6", "#FEEAA1", "#D6955B"))(nrow(occurrences_df))
# Créer un graphique interactif avec plotly
plot <- plot_ly(occurrences_df,
x = ~reorder(normalized_name, -Occurrences),  # Trier par occurrences totales
y = ~Occurrences,
type = 'bar',  # Utiliser des barres au lieu de points
marker = list(color = color_palette, opacity = 0.9),
hoverinfo = 'y+x+text') %>%
layout(title = list(text = "Análisis general del corpus",
font = list(family = "Cinzel Decorative", size = 24)),
xaxis = list(title = "Lieux",
titlefont = list(family = "Oswald", size = 18),
tickfont = list(family = "Helvetica", size = 14),
tickangle = 45),  # Tourner les étiquettes de l'axe X
yaxis = list(title = "Occurrences",
titlefont = list(family = "Oswald", size = 18),
tickfont = list(family = "Helvetica", size = 14),
type = "log",  # Utiliser une échelle logarithmique
gridcolor = 'rgba(200, 200, 200, 0.3)',  # Lignes de grille gris clair
tickvals = c(1, 2, 5, 10, 20, 50, 100, 200, 500, 668),  # Valeurs personnalisées pour les ticks
ticktext = c("1", "2", "5", "10", "20", "50", "100", "200", "500", "668")),  # Libellés personnalisés
font = list(family = "Helvetica"),
plot_bgcolor = 'rgba(240, 240, 240, 0.8)',  # Fond gris plus clair
paper_bgcolor = 'rgba(250, 250, 250, 1)',  # Fond blanc pour l'ensemble du graphique
margin = list(l = 100, r = 100, b = 200, t = 100),
bargap = 0.1,  # Réduire l'espace entre les barres
annotations = list(
x = 0.01,  # Position sur l'axe X (proche de l'origine)
y = 0.99,  # Position sur l'axe Y (tout en haut)
text = paste("Max Occurrence:", max(occurrences_df$Occurrences)),
showarrow = FALSE,
xref = "paper",  # Positionner par rapport au papier, pas aux données
yref = "paper",
font = list(family = "Oswald", size = 14, color = "#000000"),
align = "left"
))
# Afficher le graphique
plot
df <- read.csv("/Users/pauline/Documents/DocumentsSandoz/Sandoz/pliegos-ner/stat_R/NER_List_All_18.csv", stringsAsFactors = FALSE)
# Supprimer les lignes où normalized_name est vide ou contient uniquement des espaces
df <- df %>%
filter(trimws(normalized_name) != "")
# Compter les occurrences de chaque nom
occurrences_df <- df %>%
group_by(normalized_name) %>%
summarise(Occurrences = n()) %>%
ungroup()
# Trier par nombre d'occurrences décroissant
occurrences_df <- occurrences_df %>%
arrange(desc(Occurrences))
# Créer une palette de couleurs progressive (du plus foncé au plus clair)
color_palette <- colorRampPalette(c("#18534F", "#226D68", "#ECF8F6", "#FEEAA1", "#D6955B"))(nrow(occurrences_df))
# Créer un graphique interactif avec plotly
plot <- plot_ly(occurrences_df,
x = ~reorder(normalized_name, -Occurrences),  # Trier par occurrences totales
y = ~Occurrences,
type = 'bar',  # Utiliser des barres au lieu de points
marker = list(color = color_palette, opacity = 0.9),
hoverinfo = 'y+x+text') %>%
layout(title = list(text = "Análisis general del corpus",
font = list(family = "Cinzel Decorative", size = 24)),
xaxis = list(title = "Lieux",
titlefont = list(family = "Oswald", size = 18),
tickfont = list(family = "Helvetica", size = 14),
tickangle = 45),  # Tourner les étiquettes de l'axe X
yaxis = list(title = "Occurrences",
titlefont = list(family = "Oswald", size = 18),
tickfont = list(family = "Helvetica", size = 14),
type = "log",  # Utiliser une échelle logarithmique
gridcolor = 'rgba(200, 200, 200, 0.3)',  # Lignes de grille gris clair
tickvals = c(1, 2, 5, 10, 20, 50, 100, 200, 500, 668),  # Valeurs personnalisées pour les ticks
ticktext = c("1", "2", "5", "10", "20", "50", "100", "200", "500", "668")),  # Libellés personnalisés
font = list(family = "Helvetica"),
plot_bgcolor = 'rgba(240, 240, 240, 0.8)',  # Fond gris plus clair
paper_bgcolor = 'rgba(250, 250, 250, 1)',  # Fond blanc pour l'ensemble du graphique
margin = list(l = 100, r = 100, b = 200, t = 100),
bargap = 0.1,  # Réduire l'espace entre les barres
# Afficher le graphique
plot
df <- read.csv("/Users/pauline/Documents/DocumentsSandoz/Sandoz/pliegos-ner/stat_R/NER_List_All_18.csv", stringsAsFactors = FALSE)
# Supprimer les lignes où normalized_name est vide ou contient uniquement des espaces
df <- df %>%
filter(trimws(normalized_name) != "")
# Compter les occurrences de chaque nom
occurrences_df <- df %>%
group_by(normalized_name) %>%
summarise(Occurrences = n()) %>%
ungroup()
# Trier par nombre d'occurrences décroissant
occurrences_df <- occurrences_df %>%
arrange(desc(Occurrences))
# Créer une palette de couleurs progressive (du plus foncé au plus clair)
color_palette <- colorRampPalette(c("#18534F", "#226D68", "#ECF8F6", "#FEEAA1", "#D6955B"))(nrow(occurrences_df))
# Créer un graphique interactif avec plotly
plot <- plot_ly(occurrences_df,
x = ~reorder(normalized_name, -Occurrences),  # Trier par occurrences totales
y = ~Occurrences,
type = 'bar',  # Utiliser des barres au lieu de points
marker = list(color = color_palette, opacity = 0.9),
hoverinfo = 'y+x+text') %>%
layout(title = list(text = "Análisis general del corpus",
font = list(family = "Cinzel Decorative", size = 24)),
xaxis = list(title = "Lieux",
titlefont = list(family = "Oswald", size = 18),
tickfont = list(family = "Helvetica", size = 14),
tickangle = 45),  # Tourner les étiquettes de l'axe X
yaxis = list(title = "Occurrences",
titlefont = list(family = "Oswald", size = 18),
tickfont = list(family = "Helvetica", size = 14),
type = "log",  # Utiliser une échelle logarithmique
gridcolor = 'rgba(200, 200, 200, 0.3)',  # Lignes de grille gris clair
tickvals = c(1, 2, 5, 10, 20, 50, 100, 200, 500, 668),  # Valeurs personnalisées pour les ticks
ticktext = c("1", "2", "5", "10", "20", "50", "100", "200", "500", "668")),  # Libellés personnalisés
font = list(family = "Helvetica"),
plot_bgcolor = 'rgba(240, 240, 240, 0.8)',  # Fond gris plus clair
paper_bgcolor = 'rgba(250, 250, 250, 1)',  # Fond blanc pour l'ensemble du graphique
margin = list(l = 100, r = 100, b = 200, t = 100),
bargap = 0.1)
# Afficher le graphique
plot
# Compter les occurrences de chaque nom
occurrences_df <- d %>%
group_by(normalized_name) %>%
summarise(Occurrences = n()) %>%
ungroup()
# Joindre les deux DataFrames sur 'normalized_name'
d <- merge(d, occurrences_df, by = "normalized_name", all.x = TRUE)
# Supprimer les doublons en gardant uniquement la première occurrence
d <- d %>%
distinct(normalized_name, .keep_all = TRUE)
# Trier par nombre d'occurrences décroissant et sélectionner les 20 premiers lieux
d_sample <- d %>%
arrange(desc(Occurrences.x)) %>%
slice(1:20)  # Prendre les 20 premières occurrences
# Créer une palette de couleurs progressive (du plus foncé au plus clair)
color_palette <- colorRampPalette(c("#18534F", "#226D68", "#ECF8F6", "#FEEAA1", "#D6955B"))(nrow(d_sample))
# Créer un graphique interactif avec plotly
plot <- plot_ly(d_sample,
x = ~reorder(normalized_name, -Occurrences.x),  # Reordering to have the highest first
y = ~Occurrences.x,
type = 'bar',
marker = list(color = color_palette, opacity = 0.9)) %>%  # Slight transparency
layout(title = list(text = "Los topónimos más comunes",
font = list(family = "Cinzel Decorative", size = 24)),
xaxis = list(title = "",
titlefont = list(family = "Oswald", size = 18),
tickfont = list(family = "Helvetica", size = 14)),
yaxis = list(title = "",
titlefont = list(family = "Oswald", size = 18),
tickfont = list(family = "Helvetica", size = 14),
gridcolor = 'rgba(200, 200, 200, 0.3)'),  # Light gray grid lines
font = list(family = "Helvetica"),
plot_bgcolor = 'rgba(240, 240, 240, 0.5)',  # Light gray background
paper_bgcolor = 'rgba(250, 250, 250, 1)',  # White background for the entire plot area
margin = list(l = 50, r = 50, b = 150, t = 50),
bargap = 0.2)
# Afficher le graphique
plot
# Supprimer les lignes où 'normalized_name' est vide ou contient uniquement des espaces
data <- data %>%
filter(trimws(normalized_name) != "")
# Ajouter une colonne 'Collection' en fonction de 'id_doc'
data <- data %>%
mutate(Collection = case_when(
grepl("Moreno_", id_doc) ~ "Moreno",
grepl("BCN_", id_doc) ~ "Varios, Carmona, Barcelona",
grepl("Carmona_", id_doc) ~ "Varios, Carmona, Barcelona",
grepl("Varios_", id_doc) ~ "Varios, Carmona, Barcelona",
TRUE ~ "Autre"
))
# Compter les occurrences de chaque nom
occurrences_df <- d %>%
group_by(normalized_name) %>%
summarise(Occurrences = n()) %>%
ungroup()
# Ajouter une colonne 'Collection' en fonction de 'id_doc'
d <- d %>%
mutate(Collection = case_when(
grepl("Moreno_", id_doc) ~ "Moreno",
grepl("BCN_", id_doc) ~ "Varios, Carmona, Barcelona",
grepl("Carmona_", id_doc) ~ "Varios, Carmona, Barcelona",
grepl("Varios_", id_doc) ~ "Varios, Carmona, Barcelona",
TRUE ~ "Autre"
))
# Compter les occurrences de chaque nom de lieu par collection
occurrences_df <- d %>%
group_by(normalized_name, Collection) %>%
summarise(Occurrences = n(), .groups = 'drop')
# Calculer les occurrences totales pour chaque lieu
total_occurrences <- occurrences_df %>%
group_by(normalized_name) %>%
summarise(Total_Occurrences = sum(Occurrences), .groups = 'drop')
# Joindre les données des occurrences totales au dataframe principal
filtered_data <- occurrences_df %>%
inner_join(total_occurrences, by = "normalized_name") %>%
arrange(desc(Total_Occurrences)) %>%
slice(1:60)  # Sélectionner les 20 premières occurrences après avoir trié
# Restreindre aux lieux sélectionnés dans 'filtered_data'
filtered_data <- filtered_data %>%
filter(normalized_name %in% filtered_data$normalized_name)
# Palette de couleurs pour les collections
color_palette <- c("Moreno" = "#F14D25", "Varios, Carmona, Barcelona" = "#0E918C")
# Créer un graphique interactif avec plotly (stacked bar chart)
plot <- plot_ly(filtered_data,
x = ~reorder(normalized_name, -Total_Occurrences),  # Trier par occurrences totales
y = ~Occurrences,
type = 'bar',
color = ~Collection,
colors = color_palette,
text = ~paste(Collection, ": ", Occurrences),
hoverinfo = 'text') %>%
layout(barmode = 'stack',  # Stacked bars
title = list(text = "Lugares más frecuentes y colección",
font = list(family = "Cinzel Decorative", size = 24)),
xaxis = list(title = "",
titlefont = list(family = "Oswald", size = 18),
tickfont = list(family = "Helvetica", size = 14)),
yaxis = list(title = "",
titlefont = list(family = "Oswald", size = 18),
tickfont = list(family = "Helvetica", size = 14),
gridcolor = 'rgba(200, 200, 200, 0.3)'),  # Lignes de grille gris clair
font = list(family = "Helvetica"),
plot_bgcolor = 'rgba(240, 240, 240, 0.5)',  # Fond gris clair
paper_bgcolor = 'rgba(250, 250, 250, 1)',  # Fond blanc pour l'ensemble du graphique
margin = list(l = 50, r = 50, b = 150, t = 50),
bargap = 0.2,
legend = list(title = list(text = "Collection")))
# Afficher le graphique
plot
data <- read.csv("/Users/pauline/Documents/DocumentsSandoz/Sandoz/pliegos-ner/stat_R/NER_List_All_18.csv", stringsAsFactors = FALSE)
# Supprimer les lignes où 'normalized_name' est vide ou contient uniquement des espaces
data <- data %>%
filter(trimws(normalized_name) != "")
# Ajouter une colonne 'Collection' en fonction de 'id_doc'
data <- data %>%
mutate(Collection = case_when(
grepl("Moreno_", id_doc) ~ "Moreno",
grepl("BCN_", id_doc) ~ "Varios, Carmona, Barcelona",
grepl("Carmona_", id_doc) ~ "Varios, Carmona, Barcelona",
grepl("Varios_", id_doc) ~ "Varios, Carmona, Barcelona",
TRUE ~ "Autre"
))
# Compter les occurrences de chaque nom de lieu par collection
occurrences_df <- data %>%
group_by(normalized_name, Collection) %>%
summarise(Occurrences = n(), .groups = 'drop')
# Calculer les occurrences totales pour chaque lieu
total_occurrences <- occurrences_df %>%
group_by(normalized_name) %>%
summarise(Total_Occurrences = sum(Occurrences), .groups = 'drop')
# Joindre les données des occurrences totales au dataframe principal
filtered_data <- occurrences_df %>%
inner_join(total_occurrences, by = "normalized_name") %>%
arrange(desc(Total_Occurrences)) %>%
slice(1:60)  # Sélectionner les 20 premières occurrences après avoir trié
# Restreindre aux lieux sélectionnés dans 'filtered_data'
filtered_data <- filtered_data %>%
filter(normalized_name %in% filtered_data$normalized_name)
# Palette de couleurs pour les collections
color_palette <- c("Moreno" = "#F14D25", "Varios, Carmona, Barcelona" = "#0E918C")
# Créer un graphique interactif avec plotly (stacked bar chart)
plot <- plot_ly(filtered_data,
x = ~reorder(normalized_name, -Total_Occurrences),  # Trier par occurrences totales
y = ~Occurrences,
type = 'bar',
color = ~Collection,
colors = color_palette,
text = ~paste(Collection, ": ", Occurrences),
hoverinfo = 'text') %>%
layout(barmode = 'stack',  # Stacked bars
title = list(text = "Lugares más frecuentes y colección",
font = list(family = "Cinzel Decorative", size = 24)),
xaxis = list(title = "",
titlefont = list(family = "Oswald", size = 18),
tickfont = list(family = "Helvetica", size = 14)),
yaxis = list(title = "",
titlefont = list(family = "Oswald", size = 18),
tickfont = list(family = "Helvetica", size = 14),
gridcolor = 'rgba(200, 200, 200, 0.3)'),  # Lignes de grille gris clair
font = list(family = "Helvetica"),
plot_bgcolor = 'rgba(240, 240, 240, 0.5)',  # Fond gris clair
paper_bgcolor = 'rgba(250, 250, 250, 1)',  # Fond blanc pour l'ensemble du graphique
margin = list(l = 50, r = 50, b = 150, t = 50),
bargap = 0.2,
legend = list(title = list(text = "Collection")))
# Afficher le graphique
plot
data <- read.csv("/Users/pauline/Documents/DocumentsSandoz/Sandoz/pliegos-ner/stat_R/NER_List_All_18.csv", stringsAsFactors = FALSE)
# Supprimer les lignes où 'normalized_name' est vide ou contient uniquement des espaces
data <- data %>%
filter(trimws(normalized_name) != "")
# Ajouter une colonne 'Collection' en fonction de 'id_doc'
data <- data %>%
mutate(Collection = case_when(
grepl("Moreno_", id_doc) ~ "Moreno",
grepl("BCN_", id_doc) ~ "Varios, Carmona, Barcelona",
grepl("Carmona_", id_doc) ~ "Varios, Carmona, Barcelona",
grepl("Varios_", id_doc) ~ "Varios, Carmona, Barcelona",
TRUE ~ "Autre"
))
# Compter les occurrences de chaque nom de lieu par collection
occurrences_df <- data %>%
group_by(normalized_name, Collection) %>%
summarise(Occurrences = n(), .groups = 'drop')
# Calculer les occurrences totales pour chaque lieu
total_occurrences <- occurrences_df %>%
group_by(normalized_name) %>%
summarise(Total_Occurrences = sum(Occurrences), .groups = 'drop')
# Joindre les données des occurrences totales au dataframe principal
filtered_data <- occurrences_df %>%
inner_join(total_occurrences, by = "normalized_name") %>%
arrange(desc(Total_Occurrences)) %>%
slice(1:60)  # Sélectionner les 20 premières occurrences après avoir trié
# Restreindre aux lieux sélectionnés dans 'filtered_data'
filtered_data <- filtered_data %>%
filter(normalized_name %in% filtered_data$normalized_name)
# Palette de couleurs pour les collections
color_palette <- c("Moreno" = "#F14D25", "Varios, Carmona, Barcelona" = "#0E918C")
# Créer un graphique interactif avec plotly (stacked bar chart)
plot <- plot_ly(filtered_data,
x = ~reorder(normalized_name, -Total_Occurrences),  # Trier par occurrences totales
y = ~Occurrences,
type = 'bar',
color = ~Collection,
colors = color_palette,
text = ~paste(Colección, ": ", Occurrences),
hoverinfo = 'text') %>%
layout(barmode = 'stack',  # Stacked bars
title = list(text = "Lugares más frecuentes y colección",
font = list(family = "Cinzel Decorative", size = 24)),
xaxis = list(title = "",
titlefont = list(family = "Oswald", size = 18),
tickfont = list(family = "Helvetica", size = 14)),
yaxis = list(title = "",
titlefont = list(family = "Oswald", size = 18),
tickfont = list(family = "Helvetica", size = 14),
gridcolor = 'rgba(200, 200, 200, 0.3)'),  # Lignes de grille gris clair
font = list(family = "Helvetica"),
plot_bgcolor = 'rgba(240, 240, 240, 0.5)',  # Fond gris clair
paper_bgcolor = 'rgba(250, 250, 250, 1)',  # Fond blanc pour l'ensemble du graphique
margin = list(l = 50, r = 50, b = 150, t = 50),
bargap = 0.2,
legend = list(title = list(text = "Collection")))
# Afficher le graphique
plot
data <- read.csv("/Users/pauline/Documents/DocumentsSandoz/Sandoz/pliegos-ner/stat_R/NER_List_All_18.csv", stringsAsFactors = FALSE)
# Supprimer les lignes où 'normalized_name' est vide ou contient uniquement des espaces
data <- data %>%
filter(trimws(normalized_name) != "")
# Ajouter une colonne 'Collection' en fonction de 'id_doc'
data <- data %>%
mutate(Collection = case_when(
grepl("Moreno_", id_doc) ~ "Moreno",
grepl("BCN_", id_doc) ~ "Varios, Carmona, Barcelona",
grepl("Carmona_", id_doc) ~ "Varios, Carmona, Barcelona",
grepl("Varios_", id_doc) ~ "Varios, Carmona, Barcelona",
TRUE ~ "Autre"
))
# Compter les occurrences de chaque nom de lieu par collection
occurrences_df <- data %>%
group_by(normalized_name, Collection) %>%
summarise(Occurrences = n(), .groups = 'drop')
# Calculer les occurrences totales pour chaque lieu
total_occurrences <- occurrences_df %>%
group_by(normalized_name) %>%
summarise(Total_Occurrences = sum(Occurrences), .groups = 'drop')
# Joindre les données des occurrences totales au dataframe principal
filtered_data <- occurrences_df %>%
inner_join(total_occurrences, by = "normalized_name") %>%
arrange(desc(Total_Occurrences)) %>%
slice(1:60)  # Sélectionner les 20 premières occurrences après avoir trié
# Restreindre aux lieux sélectionnés dans 'filtered_data'
filtered_data <- filtered_data %>%
filter(normalized_name %in% filtered_data$normalized_name)
# Palette de couleurs pour les collections
color_palette <- c("Moreno" = "#F14D25", "Varios, Carmona, Barcelona" = "#0E918C")
# Créer un graphique interactif avec plotly (stacked bar chart)
plot <- plot_ly(filtered_data,
x = ~reorder(normalized_name, -Total_Occurrences),  # Trier par occurrences totales
y = ~Occurrences,
type = 'bar',
color = ~Collection,
colors = color_palette,
text = ~paste(Collection, ": ", Occurrences),
hoverinfo = 'text') %>%
layout(barmode = 'stack',  # Stacked bars
title = list(text = "Lugares más frecuentes y colección",
font = list(family = "Cinzel Decorative", size = 24)),
xaxis = list(title = "",
titlefont = list(family = "Oswald", size = 18),
tickfont = list(family = "Helvetica", size = 14)),
yaxis = list(title = "",
titlefont = list(family = "Oswald", size = 18),
tickfont = list(family = "Helvetica", size = 14),
gridcolor = 'rgba(200, 200, 200, 0.3)'),  # Lignes de grille gris clair
font = list(family = "Helvetica"),
plot_bgcolor = 'rgba(240, 240, 240, 0.5)',  # Fond gris clair
paper_bgcolor = 'rgba(250, 250, 250, 1)',  # Fond blanc pour l'ensemble du graphique
margin = list(l = 50, r = 50, b = 150, t = 50),
bargap = 0.2,
legend = list(title = list(text = "Colección")))
# Afficher le graphique
plot
